package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.tunsh.greendaodemo.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookAuthor = new Property(2, String.class, "bookAuthor", false, "BOOK_AUTHOR");
        public final static Property Last = new Property(3, String.class, "last", false, "LAST");
        public final static Property Lasttime = new Property(4, String.class, "lasttime", false, "LASTTIME");
        public final static Property CurrentChapterName = new Property(5, String.class, "currentChapterName", false, "CURRENT_CHAPTER_NAME");
        public final static Property CurrentNum = new Property(6, String.class, "currentNum", false, "CURRENT_NUM");
        public final static Property BookCoverUrl = new Property(7, String.class, "bookCoverUrl", false, "BOOK_COVER_URL");
        public final static Property BookLocal = new Property(8, String.class, "bookLocal", false, "BOOK_LOCAL");
        public final static Property IsOver = new Property(9, String.class, "isOver", false, "IS_OVER");
        public final static Property ReadNum = new Property(10, String.class, "readNum", false, "READ_NUM");
        public final static Property CurrentChapterPage = new Property(11, String.class, "currentChapterPage", false, "CURRENT_CHAPTER_PAGE");
        public final static Property NetBookId = new Property(12, String.class, "netBookId", false, "NET_BOOK_ID");
    }

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"BOOK_AUTHOR\" TEXT," + // 2: bookAuthor
                "\"LAST\" TEXT," + // 3: last
                "\"LASTTIME\" TEXT," + // 4: lasttime
                "\"CURRENT_CHAPTER_NAME\" TEXT," + // 5: currentChapterName
                "\"CURRENT_NUM\" TEXT," + // 6: currentNum
                "\"BOOK_COVER_URL\" TEXT," + // 7: bookCoverUrl
                "\"BOOK_LOCAL\" TEXT," + // 8: bookLocal
                "\"IS_OVER\" TEXT," + // 9: isOver
                "\"READ_NUM\" TEXT," + // 10: readNum
                "\"CURRENT_CHAPTER_PAGE\" TEXT," + // 11: currentChapterPage
                "\"NET_BOOK_ID\" TEXT);"); // 12: netBookId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(3, bookAuthor);
        }
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(4, last);
        }
 
        String lasttime = entity.getLasttime();
        if (lasttime != null) {
            stmt.bindString(5, lasttime);
        }
 
        String currentChapterName = entity.getCurrentChapterName();
        if (currentChapterName != null) {
            stmt.bindString(6, currentChapterName);
        }
 
        String currentNum = entity.getCurrentNum();
        if (currentNum != null) {
            stmt.bindString(7, currentNum);
        }
 
        String bookCoverUrl = entity.getBookCoverUrl();
        if (bookCoverUrl != null) {
            stmt.bindString(8, bookCoverUrl);
        }
 
        String bookLocal = entity.getBookLocal();
        if (bookLocal != null) {
            stmt.bindString(9, bookLocal);
        }
 
        String isOver = entity.getIsOver();
        if (isOver != null) {
            stmt.bindString(10, isOver);
        }
 
        String readNum = entity.getReadNum();
        if (readNum != null) {
            stmt.bindString(11, readNum);
        }
 
        String currentChapterPage = entity.getCurrentChapterPage();
        if (currentChapterPage != null) {
            stmt.bindString(12, currentChapterPage);
        }
 
        String netBookId = entity.getNetBookId();
        if (netBookId != null) {
            stmt.bindString(13, netBookId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(3, bookAuthor);
        }
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(4, last);
        }
 
        String lasttime = entity.getLasttime();
        if (lasttime != null) {
            stmt.bindString(5, lasttime);
        }
 
        String currentChapterName = entity.getCurrentChapterName();
        if (currentChapterName != null) {
            stmt.bindString(6, currentChapterName);
        }
 
        String currentNum = entity.getCurrentNum();
        if (currentNum != null) {
            stmt.bindString(7, currentNum);
        }
 
        String bookCoverUrl = entity.getBookCoverUrl();
        if (bookCoverUrl != null) {
            stmt.bindString(8, bookCoverUrl);
        }
 
        String bookLocal = entity.getBookLocal();
        if (bookLocal != null) {
            stmt.bindString(9, bookLocal);
        }
 
        String isOver = entity.getIsOver();
        if (isOver != null) {
            stmt.bindString(10, isOver);
        }
 
        String readNum = entity.getReadNum();
        if (readNum != null) {
            stmt.bindString(11, readNum);
        }
 
        String currentChapterPage = entity.getCurrentChapterPage();
        if (currentChapterPage != null) {
            stmt.bindString(12, currentChapterPage);
        }
 
        String netBookId = entity.getNetBookId();
        if (netBookId != null) {
            stmt.bindString(13, netBookId);
        }
    }

    @Override
    protected final void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookAuthor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lasttime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // currentChapterName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // currentNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bookCoverUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bookLocal
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isOver
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // readNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // currentChapterPage
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // netBookId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLasttime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentChapterName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurrentNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBookCoverUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBookLocal(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsOver(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReadNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCurrentChapterPage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNetBookId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
