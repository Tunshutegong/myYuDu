package com.afa.tourism.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.tunsh.greendaodemo.Chapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER".
*/
public class ChapterDao extends AbstractDao<Chapter, Void> {

    public static final String TABLENAME = "CHAPTER";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property ChapterId = new Property(1, Long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property ChapterName = new Property(2, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property ChapterContent = new Property(3, String.class, "chapterContent", false, "CHAPTER_CONTENT");
        public final static Property ChapterContentUrl = new Property(4, String.class, "chapterContentUrl", false, "CHAPTER_CONTENT_URL");
    }

    private Query<Chapter> book_ChaptersQuery;

    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"CHAPTER_ID\" INTEGER," + // 1: chapterId
                "\"CHAPTER_NAME\" TEXT," + // 2: chapterName
                "\"CHAPTER_CONTENT\" TEXT," + // 3: chapterContent
                "\"CHAPTER_CONTENT_URL\" TEXT);"); // 4: chapterContentUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindLong(2, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        String chapterContent = entity.getChapterContent();
        if (chapterContent != null) {
            stmt.bindString(4, chapterContent);
        }
 
        String chapterContentUrl = entity.getChapterContentUrl();
        if (chapterContentUrl != null) {
            stmt.bindString(5, chapterContentUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindLong(2, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        String chapterContent = entity.getChapterContent();
        if (chapterContent != null) {
            stmt.bindString(4, chapterContent);
        }
 
        String chapterContentUrl = entity.getChapterContentUrl();
        if (chapterContentUrl != null) {
            stmt.bindString(5, chapterContentUrl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // chapterId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapterContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // chapterContentUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChapterId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setChapterName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChapterContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterContentUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Chapter entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Chapter entity) {
        return null;
    }

    @Override
    public boolean hasKey(Chapter entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chapters" to-many relationship of Book. */
    public List<Chapter> _queryBook_Chapters(Long chapterId) {
        synchronized (this) {
            if (book_ChaptersQuery == null) {
                QueryBuilder<Chapter> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChapterId.eq(null));
                book_ChaptersQuery = queryBuilder.build();
            }
        }
        Query<Chapter> query = book_ChaptersQuery.forCurrentThread();
        query.setParameter(0, chapterId);
        return query.list();
    }

}
